import telebot
from telebot import types
import os
from dotenv import load_dotenv
import logging
from scraper import get_empty_cells
import json
from datetime import datetime
from config import DEMO_URL, REAL_URL, TABLE_DESCRIPTIONS, MAX_CELLS_PER_CATEGORY

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Get bot token from environment variable
BOT_TOKEN = os.getenv('BOT_TOKEN')

# Initialize bot
bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=['start'])
def start_command(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    item1 = types.KeyboardButton('/check')
    item2 = types.KeyboardButton('/stats')
    item3 = types.KeyboardButton('/help')
    markup.add(item1, item2, item3)
    
    bot.reply_to(message, 
                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏.\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.",
                reply_markup=markup)

def organize_empty_cells(empty_cells):
    """–û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    organized_cells = {}
    
    for cell in empty_cells:
        parts = cell.split(',', 1)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü—ã –∏ –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
        if len(parts) > 1:
            table_id = parts[0].strip()
            info = parts[1].strip()
            
            if table_id not in organized_cells:
                organized_cells[table_id] = []
            
            organized_cells[table_id].append(info)
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É, –¥–æ–±–∞–≤–ª—è–µ–º –≤ "–î—Ä—É–≥–æ–µ"
            if "–î—Ä—É–≥–æ–µ" not in organized_cells:
                organized_cells["–î—Ä—É–≥–æ–µ"] = []
            
            organized_cells["–î—Ä—É–≥–æ–µ"].append(cell)
    
    return organized_cells

def save_empty_cells_to_file(empty_cells):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ –≤ JSON-—Ñ–∞–π–ª —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º"""
    current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = f"empty_cells_{current_time}.json"
    
    data = {
        "timestamp": datetime.now().isoformat(),
        "empty_cells": empty_cells
    }
    
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        
        return filename
    except Exception as e:
        logger.error(f"Error saving empty cells to file: {str(e)}")
        return None

@bot.message_handler(commands=['check'])
def check_empty_cells(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    chat_id = message.chat.id
    if hasattr(bot, 'checking_chats') and chat_id in bot.checking_chats:
        bot.reply_to(message, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    
    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
    if not hasattr(bot, 'checking_chats'):
        bot.checking_chats = set()
    bot.checking_chats.add(chat_id)
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    sent_msg = bot.reply_to(message, "–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ URL
        url = REAL_URL if REAL_URL else DEMO_URL
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã)
        command_args = message.text.split()
        if len(command_args) > 1 and command_args[1].lower() == "demo":
            url = DEMO_URL
            bot.reply_to(message, f"–ò—Å–ø–æ–ª—å–∑—É—é –¥–µ–º–æ-URL: {DEMO_URL}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
        empty_cells = get_empty_cells(url)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –æ–±—ä–µ–º–∞ –≤—ã–≤–æ–¥–∞
        unique_cells = []
        unique_cell_texts = set()
        for cell in empty_cells:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —è—á–µ–π–∫–∏
            # (–±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç–∏ –±–µ–∑ —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
            key_parts = []
            for part in cell.split(','):
                if not any(x in part.lower() for x in ["item", "row", "column"]):
                    continue
                key_parts.append(part.strip())
            
            cell_key = '|'.join(key_parts)
            
            if cell_key not in unique_cell_texts:
                unique_cells.append(cell)
                unique_cell_texts.add(cell_key)
        
        if not unique_cells:
            bot.reply_to(message, "–í—Å–µ —è—á–µ–π–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
            return
            
        # –û—Ä–≥–∞–Ω–∏–∑—É–µ–º —è—á–µ–π–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        organized_cells = organize_empty_cells(unique_cells)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        filename = save_empty_cells_to_file(empty_cells)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = f"–ù–∞–π–¥–µ–Ω—ã –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏: {len(unique_cells)}\n\n"
        
        # Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages = []
        current_message = response
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for table_id, cells in organized_cells.items():
            # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            category_header = f"üìä {table_id} ({len(cells)} —è—á–µ–µ–∫):\n"
            
            if len(current_message) + len(category_header) > 4000:
                messages.append(current_message)
                current_message = category_header
            else:
                current_message += category_header
                
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —è—á–µ–µ–∫ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for i, cell in enumerate(cells[:5]):
                cell_text = f"   - {cell}\n"
                
                if len(current_message) + len(cell_text) > 4000:
                    messages.append(current_message)
                    current_message = cell_text
                else:
                    current_message += cell_text
            
            # –ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ–ª—å—à–µ 5 —è—á–µ–µ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            if len(cells) > 5:
                remaining_text = f"   - ... –∏ –µ—â–µ {len(cells) - 5} –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫\n\n"
                
                if len(current_message) + len(remaining_text) > 4000:
                    messages.append(current_message)
                    current_message = remaining_text
                else:
                    current_message += remaining_text
            else:
                current_message += "\n"
                
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            for keyword, description in TABLE_DESCRIPTIONS.items():
                if keyword in table_id.lower():
                    info = f"{description}\n"
                    if len(current_message) + len(info) > 4000:
                        messages.append(current_message)
                        current_message = info
                    else:
                        current_message += info
                    break
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        if filename:
            file_info = f"üíæ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}\n"
            
            if len(current_message) + len(file_info) > 4000:
                messages.append(current_message)
                current_message = file_info
            else:
                current_message += file_info
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
        if current_message:
            messages.append(current_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in messages:
            bot.reply_to(message, msg)
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if filename:
            with open(filename, 'rb') as f:
                bot.send_document(message.chat.id, f, caption="–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")
    except Exception as e:
        logger.error(f"Error checking empty cells: {str(e)}")
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
    finally:
        # –£–±–∏—Ä–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        if hasattr(bot, 'checking_chats'):
            bot.checking_chats.discard(chat_id)

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å–∞–π—Ç–µ meinpflegedienst.com.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
/check demo - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ –¥–µ–º–æ-—Ç–∞–±–ª–∏—Ü–µ
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é

–≠—Ç–æ—Ç –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏ –Ω–∞—Ö–æ–¥–∏—Ç –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏. 
–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º.
"""
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['stats'])
def stats_command(message):
    try:
        # –ò—â–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        files = [f for f in os.listdir(".") if f.startswith("empty_cells_") and f.endswith(".json")]
        
        if not files:
            bot.reply_to(message, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        latest_file = max(files, key=lambda f: os.path.getctime(f))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        with open(latest_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        empty_cells = data["empty_cells"]
        timestamp = data.get("timestamp", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        # –û—Ä–≥–∞–Ω–∏–∑—É–µ–º —è—á–µ–π–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        organized_cells = organize_empty_cells(empty_cells)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ (–ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {timestamp})\n\n"
        response += f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(empty_cells)} –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫\n"
        response += f"–ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Ä–∞–∑–¥–µ–ª–æ–≤: {len(organized_cells)}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
        response += "–†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º:\n"
        for table_id, cells in organized_cells.items():
            response += f"- {table_id}: {len(cells)} —è—á–µ–µ–∫\n"
        
        bot.reply_to(message, response)
        
    except Exception as e:
        logger.error(f"Error showing stats: {str(e)}")
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

# Start the bot
if __name__ == '__main__':
    logger.info("Starting bot...")
    bot.infinity_polling()
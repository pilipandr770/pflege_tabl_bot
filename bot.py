import telebot
from telebot import types
import os
from dotenv import load_dotenv
import logging
from scraper import get_empty_cells, dump_all_cells
import json
from datetime import datetime
import openai
import re
from collections import defaultdict
from config import (
    DEMO_URL, REAL_URL, TABLE_DESCRIPTIONS, MAX_CELLS_PER_CATEGORY
)

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Get bot token from environment variable
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ OpenAI –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
OPENAI_ASSISTANT_ID = os.getenv('OPENAI_ASSISTANT_ID')
OPENAI_MODEL = os.getenv('OPENAI_MODEL', 'gpt-4.1-Nano')

# Initialize OpenAI client if API key is available
openai_client = None
if OPENAI_API_KEY:
    openai.api_key = OPENAI_API_KEY
    try:
        openai_client = openai.OpenAI(api_key=OPENAI_API_KEY)
        logger.info("OpenAI client initialized using new API")
    except Exception as e:
        logger.warning(f"Error initializing OpenAI client: {e}")
        openai_client = None
        logger.warning("OpenAI client could not be initialized. AI explanation features will be disabled.")
else:
    logger.warning("OpenAI API key not found. AI explanation features will be disabled.")

# Initialize bot
bot = telebot.TeleBot(BOT_TOKEN)

# Storage for user comments
comments_db = {}

@bot.message_handler(commands=['start'])
def start_command(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    item1 = types.KeyboardButton('/check')
    item2 = types.KeyboardButton('/stats')
    item3 = types.KeyboardButton('/columns')
    item4 = types.KeyboardButton('/comments')
    item5 = types.KeyboardButton('/help')
    markup.add(item1, item2, item3, item4, item5)
    
    bot.reply_to(message, 
                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏.\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.",
                reply_markup=markup)

def organize_empty_cells(empty_cells):
    """–û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    organized_cells = {}
    
    for cell in empty_cells:
        parts = cell.split(',', 1)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü—ã –∏ –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
        if len(parts) > 1:
            table_id = parts[0].strip()
            info = parts[1].strip()
            
            if table_id not in organized_cells:
                organized_cells[table_id] = []
            
            organized_cells[table_id].append(info)
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É, –¥–æ–±–∞–≤–ª—è–µ–º –≤ "–î—Ä—É–≥–æ–µ"
            if "–î—Ä—É–≥–æ–µ" not in organized_cells:
                organized_cells["–î—Ä—É–≥–æ–µ"] = []
            
            organized_cells["–î—Ä—É–≥–æ–µ"].append(cell)
    
    return organized_cells

def save_empty_cells_to_file(empty_cells):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ –≤ JSON-—Ñ–∞–π–ª —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º"""
    current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = f"empty_cells_{current_time}.json"
    
    data = {
        "timestamp": datetime.now().isoformat(),
        "empty_cells": empty_cells
    }
    
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        
        return filename
    except Exception as e:
        logger.error(f"Error saving empty cells to file: {str(e)}")
        return None

@bot.message_handler(commands=['check'])
def check_empty_cells(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    chat_id = message.chat.id
    if hasattr(bot, 'checking_chats') and chat_id in bot.checking_chats:
        bot.reply_to(message, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    
    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
    if not hasattr(bot, 'checking_chats'):
        bot.checking_chats = set()
    bot.checking_chats.add(chat_id)
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    sent_msg = bot.reply_to(message, "–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ URL
        url = REAL_URL if REAL_URL else DEMO_URL
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã)
        command_args = message.text.split()
        if len(command_args) > 1 and command_args[1].lower() == "demo":
            url = DEMO_URL
            bot.reply_to(message, f"–ò—Å–ø–æ–ª—å–∑—É—é –¥–µ–º–æ-URL: {DEMO_URL}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
        empty_cells = get_empty_cells(url)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –æ–±—ä–µ–º–∞ –≤—ã–≤–æ–¥–∞
        unique_cells = []
        unique_cell_texts = set()
        for cell in empty_cells:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —è—á–µ–π–∫–∏
            # (–±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç–∏ –±–µ–∑ —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
            key_parts = []
            for part in cell.split(','):
                if not any(x in part.lower() for x in ["item", "row", "column"]):
                    continue
                key_parts.append(part.strip())
            
            cell_key = '|'.join(key_parts)
            
            if cell_key not in unique_cell_texts:
                unique_cells.append(cell)
                unique_cell_texts.add(cell_key)
        
        if not unique_cells:
            bot.reply_to(message, "–í—Å–µ —è—á–µ–π–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
            return
            
        # –û—Ä–≥–∞–Ω–∏–∑—É–µ–º —è—á–µ–π–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º ID –∫–∞–∂–¥–æ–π –Ω–∞—Ö–æ–¥–∫–µ
        organized_cells = organize_empty_cells(unique_cells)
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–∞—Ö–æ–¥–∫–∏
        findings_with_ids = {}
        finding_id = 1
        
        for table_id, cells in organized_cells.items():
            findings_with_ids[table_id] = []
            for cell in cells:
                findings_with_ids[table_id].append({
                    "id": finding_id,
                    "description": cell
                })
                finding_id += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Ö–æ–¥–∫–∞—Ö —Å ID
        findings_data = {
            "timestamp": datetime.now().isoformat(),
            "findings": findings_with_ids
        }
        
        findings_filename = f"findings_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.json"
        with open(findings_filename, 'w', encoding='utf-8') as f:
            json.dump(findings_data, f, ensure_ascii=False, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫
        raw_filename = save_empty_cells_to_file(empty_cells)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = f"–ù–∞–π–¥–µ–Ω—ã –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏: {len(unique_cells)}\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã—Ö –Ω–∞—Ö–æ–¥–æ–∫
        # –í—ã–±–∏—Ä–∞–µ–º –¥–æ 10 –Ω–∞–∏–±–æ–ª–µ–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—Ö–æ–¥–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        sample_findings = {}
        for table_id, cells in findings_with_ids.items():
            sample_findings[table_id] = cells[:min(3, len(cells))]  # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 3 –ø—Ä–∏–º–µ—Ä–∞ —Å –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        
        # –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç AI
        ai_explanation = get_ai_explanation(sample_findings)
        
        # Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages = []
        current_message = response
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for table_id, cells in findings_with_ids.items():
            # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            category_header = f"üìä {table_id} ({len(cells)} —è—á–µ–µ–∫):\n"
            
            if len(current_message) + len(category_header) > 3900:
                messages.append(current_message)
                current_message = category_header
            else:
                current_message += category_header
                
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —è—á–µ–µ–∫ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å ID
            for i, cell_data in enumerate(cells[:MAX_CELLS_PER_CATEGORY]):
                finding_id = cell_data["id"]
                cell_description = cell_data["description"]
                cell_text = f"   - #{finding_id} {cell_description}\n"
                
                if len(current_message) + len(cell_text) > 3900:
                    messages.append(current_message)
                    current_message = cell_text
                else:
                    current_message += cell_text
            
            # –ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ–ª—å—à–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —è—á–µ–µ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            if len(cells) > MAX_CELLS_PER_CATEGORY:
                remaining_text = f"   - ... –∏ –µ—â–µ {len(cells) - MAX_CELLS_PER_CATEGORY} –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫\n\n"
                
                if len(current_message) + len(remaining_text) > 3900:
                    messages.append(current_message)
                    current_message = remaining_text
                else:
                    current_message += remaining_text
            else:
                current_message += "\n"
                
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            for keyword, description in TABLE_DESCRIPTIONS.items():
                if keyword in table_id.lower():
                    info = f"{description}\n"
                    if len(current_message) + len(info) > 3900:
                        messages.append(current_message)
                        current_message = info
                    else:
                        current_message += info
                    break
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Ö–æ–¥–æ–∫
        comment_info = "\nüí¨ –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞—Ö–æ–¥–∫–∏, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–∫–∞–∑–∞–≤ ID –Ω–∞—Ö–æ–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –Ω–∞—Ö–æ–¥–∫–∏ #5: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –ø–∞—Ü–∏–µ–Ω—Ç–∞').\n"
        
        if len(current_message) + len(comment_info) > 3900:
            messages.append(current_message)
            current_message = comment_info
        else:
            current_message += comment_info
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        if raw_filename:
            file_info = f"üíæ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {raw_filename}\n"
            
            if len(current_message) + len(file_info) > 3900:
                messages.append(current_message)
                current_message = file_info
            else:
                current_message += file_info
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
        if current_message:
            messages.append(current_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in messages:
            bot.reply_to(message, msg)
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if raw_filename:
            with open(raw_filename, 'rb') as f:
                bot.send_document(message.chat.id, f, caption="–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")
                
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AI –∞–Ω–∞–ª–∏–∑, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if ai_explanation and len(ai_explanation) > 0:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            ai_parts = [ai_explanation[i:i+3900] for i in range(0, len(ai_explanation), 3900)]
            
            for i, part in enumerate(ai_parts):
                header = "üß† –ê–Ω–∞–ª–∏–∑ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ –æ—Ç –ò–ò:\n\n" if i == 0 else "üß† –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞:\n\n"
                bot.send_message(message.chat.id, header + part)
    except Exception as e:
        logger.error(f"Error checking empty cells: {str(e)}")
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
    finally:
        # –£–±–∏—Ä–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        if hasattr(bot, 'checking_chats'):
            bot.checking_chats.discard(chat_id)

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å–∞–π—Ç–µ meinpflegedienst.com.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
/check demo - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ –¥–µ–º–æ-—Ç–∞–±–ª–∏—Ü–µ
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫
/columns - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü
/comments - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –Ω–∞—Ö–æ–¥–∫–∞–º
/dumpall - –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —è—á–µ–π–∫–∏ –∏ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫
- –ò–ò-–∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Ö–æ–¥–æ–∫ (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Ö–æ–¥–∫–æ–π)
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
- –í—ã–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–ª–∏—Ü

–≠—Ç–æ—Ç –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏ –Ω–∞—Ö–æ–¥–∏—Ç –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏. 
–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º.
"""
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['stats'])
def stats_command(message):
    try:
        # –ò—â–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        files = [f for f in os.listdir(".") if f.startswith("empty_cells_") and f.endswith(".json")]
        
        if not files:
            bot.reply_to(message, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        latest_file = max(files, key=lambda f: os.path.getctime(f))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        with open(latest_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        empty_cells = data["empty_cells"]
        timestamp = data.get("timestamp", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        # –û—Ä–≥–∞–Ω–∏–∑—É–µ–º —è—á–µ–π–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        organized_cells = organize_empty_cells(empty_cells)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ (–ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {timestamp})\n\n"
        response += f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(empty_cells)} –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫\n"
        response += f"–ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Ä–∞–∑–¥–µ–ª–æ–≤: {len(organized_cells)}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
        response += "–†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º:\n"
        for table_id, cells in organized_cells.items():
            response += f"- {table_id}: {len(cells)} —è—á–µ–µ–∫\n"
        
        bot.reply_to(message, response)
        
    except Exception as e:
        logger.error(f"Error showing stats: {str(e)}")
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

# Function to generate AI explanations for empty cells
def get_ai_explanation(empty_cells_data):
    """
    Generate an AI explanation for empty cells using OpenAI
    
    Args:
        empty_cells_data (dict): Dictionary with table data and empty cells info
        
    Returns:
        str: AI-generated explanation or error message
    """
    if not openai_client:
        return "–ò–ò –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ: API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."
    
    if not OPENAI_ASSISTANT_ID:
        # Use completion API instead of Assistant API
        try:
            # Create a structured prompt for the model
            prompt = f"""–ê–Ω–∞–ª–∏–∑ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö:
\n–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏:\n{json.dumps(empty_cells_data, indent=2, ensure_ascii=False)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –∏–∑-–∑–∞ —ç—Ç–∏—Ö –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫\n–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —É—Ö–æ–¥–∞ –∏ —á—Ç–æ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å. –£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –ø–æ–ª—è –Ω–∞–∏–±–æ–ª–µ–µ –∫—Ä–∏—Ç–∏—á–Ω—ã \n–¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø–æ—á–µ–º—É. –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ –ø—É—Å—Ç—ã—Ö –ø–æ–ª—è—Ö, —É–∫–∞–∂–∏—Ç–µ –∏—Ö.\n"""
            # OpenAI API v1.x requires chat.completions
            try:
                response = openai_client.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=[
                        {"role": "system", "content": "–í—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –∏ –æ–±—ä—è—Å–Ω—è—Ç—å –∏—Ö –∑–Ω–∞—á–∏–º–æ—Å—Ç—å."},
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=800,
                )
                return response.choices[0].message.content
            except Exception as e:
                logger.error(f"Error using OpenAI chat completions: {e}")
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –æ—Ç –ò–ò: {e}"
        except Exception as e:
            logger.error(f"Error generating AI explanation: {str(e)}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –æ—Ç –ò–ò: {str(e)}"
    else:
        # Use Assistant API with better error handling
        try:
            # Check if we have access to the beta namespace
            if not hasattr(openai_client, 'beta'):
                logger.warning("Beta namespace not available in OpenAI client")
                return "–§—É–Ω–∫—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ API OpenAI. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è OPENAI_ASSISTANT_ID."
            # Try the beta API implementation
            try:
                thread = openai_client.beta.threads.create()
                openai_client.beta.threads.messages.create(
                    thread_id=thread.id,
                    role="user",
                    content=f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ –∏—Ö –∑–Ω–∞—á–∏–º–æ—Å—Ç—å: {json.dumps(empty_cells_data, indent=2, ensure_ascii=False)}"
                )
                run = openai_client.beta.threads.runs.create(
                    thread_id=thread.id,
                    assistant_id=OPENAI_ASSISTANT_ID
                )
                # Wait for the assistant to complete with timeout
                import time
                max_wait_time = 60  # Maximum wait time in seconds
                start_time = time.time()
                while run.status in ["queued", "in_progress"]:
                    # Check timeout
                    if time.time() - start_time > max_wait_time:
                        logger.warning(f"Timeout waiting for assistant response after {max_wait_time} seconds")
                        return "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    time.sleep(1)
                    run = openai_client.beta.threads.runs.retrieve(
                        thread_id=thread.id,
                        run_id=run.id
                    )
                if run.status == "completed":
                    messages = openai_client.beta.threads.messages.list(
                        thread_id=thread.id
                    )
                    for message in messages.data:
                        if message.role == "assistant":
                            # Handle the possibility of missing content or different data structure
                            try:
                                return message.content[0].text.value
                            except (IndexError, AttributeError) as e:
                                logger.error(f"Error extracting message content: {e}")
                                return "–ò–ò –Ω–µ —Å–º–æ–≥–ª–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
                    return "–ò–ò –Ω–µ —Å–º–æ–≥–ª–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ."
                else:
                    return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –°—Ç–∞—Ç—É—Å: {run.status}"
            except Exception as e:
                logger.error(f"Error in beta.threads API flow: {e}")
                return f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ API –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}"
        except Exception as e:
            logger.error(f"Error using Assistant API: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ API –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}"

# Function to extract finding ID from a message
def extract_finding_id(text):
    """Extract finding ID from text using regex"""
    match = re.search(r'#(?P<id>\d+)', text)
    if match:
        return match.group('id')
    return None

# Handler for comments to findings
@bot.message_handler(func=lambda message: message.reply_to_message and 
                   hasattr(message.reply_to_message, 'text') and
                   '#ID' in message.reply_to_message.text)
def handle_comment(message):
    """Handle user comments on findings"""
    finding_id = extract_finding_id(message.reply_to_message.text)
    if finding_id:
        # Save the comment
        if 'comments' not in comments_db:
            comments_db['comments'] = {}
        
        comments_db['comments'][finding_id] = {
            'user_id': message.from_user.id,
            'user_name': message.from_user.username or message.from_user.first_name,
            'comment': message.text,
            'timestamp': datetime.now().isoformat()
        }
        
        # Save comments to file
        with open('comments.json', 'w', encoding='utf-8') as f:
            json.dump(comments_db, f, ensure_ascii=False, indent=2)
            
        bot.reply_to(message, f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–∞—Ö–æ–¥–∫–µ #{finding_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    else:
        bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –Ω–∞—Ö–æ–¥–∫–∏. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

# Handler to view comments
@bot.message_handler(commands=['comments'])
def view_comments(message):
    """View all comments for findings"""
    if not os.path.exists('comments.json'):
        bot.reply_to(message, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –Ω–∞—Ö–æ–¥–∫–∞–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return
        
    try:
        with open('comments.json', 'r', encoding='utf-8') as f:
            comments_data = json.load(f)
            
        if not comments_data.get('comments'):
            bot.reply_to(message, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –Ω–∞—Ö–æ–¥–∫–∞–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return
            
        response = "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –Ω–∞—Ö–æ–¥–∫–∞–º:\n\n"
        
        for finding_id, comment_info in comments_data.get('comments', {}).items():
            response += f"üìå –ù–∞—Ö–æ–¥–∫–∞ #{finding_id}:\n"
            response += f"  - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_info['comment']}\n"
            response += f"  - –û—Ç: @{comment_info['user_name']}\n"
            response += f"  - –í—Ä–µ–º—è: {datetime.fromisoformat(comment_info['timestamp']).strftime('%d.%m.%Y %H:%M')}\n\n"
            
        bot.reply_to(message, response)
    except Exception as e:
        logger.error(f"Error viewing comments: {str(e)}")
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {str(e)}")

# Command to list all table columns
@bot.message_handler(commands=['columns'])
def list_columns(message):
    """List all columns from the last scan"""
    try:
        # Find the latest results file
        files = [f for f in os.listdir(".") if f.startswith("empty_cells_") and f.endswith(".json")]
        
        if not files:
            bot.reply_to(message, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return
            
        # Get the latest file
        latest_file = max(files, key=lambda f: os.path.getctime(f))
        
        # Load data
        with open(latest_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
            
        empty_cells = data.get("empty_cells", [])
        
        # Extract all column names
        column_names = defaultdict(set)
        
        for cell in empty_cells:
            # Parse cell text to extract table and column information
            parts = cell.split(',')
            if len(parts) >= 3:
                table_id = parts[0].strip()
                col_info = ','.join(parts[2:]).strip()
                
                # Extract column name using regex
                col_match = re.search(r'–ö–æ–ª–æ–Ω–∫–∞ \d+\s*\(([^)]+)\)', col_info) or re.search(r'Column \d+\s*\(([^)]+)\)', col_info)
                if col_match:
                    column_names[table_id].add(col_match.group(1))
                else:
                    # Try another pattern
                    col_match = re.search(r'\(–ö–æ–ª–æ–Ω–∫–∞:\s*([^)]+)\)', col_info) or re.search(r'\(Header:\s*([^)]+)\)', col_info)
                    if col_match:
                        column_names[table_id].add(col_match.group(1))
        
        if not column_names:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return
            
        # Prepare response
        response = "üìã –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:\n\n"
        
        for table_id, columns in column_names.items():
            response += f"üìä {table_id}:\n"
            for i, column in enumerate(sorted(columns), 1):
                response += f"  {i}. {column}\n"
            response += "\n"
            
        bot.reply_to(message, response)
    except Exception as e:
        logger.error(f"Error listing columns: {str(e)}")
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–æ–∫: {str(e)}")

@bot.message_handler(commands=['dumpall'])
def dump_all_cells_command(message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —è—á–µ–π–∫–∏ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        url = REAL_URL if REAL_URL else DEMO_URL
        filename = dump_all_cells(url)
        with open(filename, 'rb') as f:
            bot.send_document(message.chat.id, f, caption="–í—Å–µ —è—á–µ–π–∫–∏ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö —è—á–µ–µ–∫: {e}")
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö —è—á–µ–µ–∫: {e}")

# Start the bot
if __name__ == '__main__':
    logger.info("Starting bot...")
    bot.infinity_polling()